#include <set>
#include <algorithm>
#include <iterator>
#include "llvm/IR/Value.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/TypeBuilder.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/InstIterator.h"
#include "llvm/Support/CFG.h"
#include "stdio.h"
#include "string.h"
#include <vector>
#include <limits>

using namespace std;
using namespace llvm;

/*
  TODO : need to define behavior of analysis
    Current Idea:
      a variable will generally get stored with its starting value and then increment/decrement towards a limit.  This analysis will record the starting value if it is a simple constant, and then record the icmp associated with it.  If a complex (non-constant) store is detected, we just skip it.  It is ok for this analysis to not be perfect, since it is just a simple warning system- ie, it is safer to not warn the programmer than to warn for an out-of-bounds that may not exist.
*/

class Range
{
  public:
  Value * min;
  Value * max;
  bool minIncl;
  bool maxIncl;
  Range() {
    minIncl = true;
    maxIncl = true;
  }
  bool operator==(Range &cR){
    return (min==cR.min) && (max==cR.max) && (minIncl==cR.minIncl) && (maxIncl==cR.maxIncl);
  }
};

class Fact
{
  public:
  bool isBottom; //everything defaults to bottom until a value is added
  vector<Range> ranges;
  Range * latest;

  Fact() {
    isBottom = true;
  }
  Fact(Fact * parent) {
    //check case where the values aren't defined yet
    if(parent != NULL){
      isBottom = parent->isBottom;
      ranges = parent->ranges;
    } else {
      isBottom = true;
    }
  }
};

class Edge
{
  public:
  bool isTop;
  bool isBottom;
  map<Value *,Fact *> * data;
  //holds comparisons that have yet to be evaluated to true or false.
  vector<Value *> * pending;

  Edge(){
    isTop = false;
    isBottom = true;
    data = new map<Value *,Fact *>();
    pending = new vector<Value *>;
  }
  //copy constructor for edge
  Edge(Edge * parent){
    isTop = parent->isTop;
    isBottom = parent->isBottom;
    data = new map<Value *,Fact *>();
    map<Value *,Fact *>::iterator it;
    for(it = parent->data->begin(); it != parent->data->end(); it++) {
      addFact(it->first,it->second);
    }
  }
  void addFact(Value * key, Fact * f){ //can add multiple values, preserves bottom state
    if(data->count(key) == 0) {
      data->insert(pair<Value *,Fact *>(key,new Fact(f)));
    } else {
      Fact * ef = data->find(key)->second;
      ef->isBottom = (ef->isBottom || f->isBottom);
      ef->ranges.insert(ef->ranges.end(),f->ranges.begin(),f->ranges.end());
    }
  }
  //used to keep track of assignment-
  void addValue(Value * key, Value * possibleValue) {
    Fact * f;
    Range temp; //create a new range to hold the value
    temp.min = possibleValue;
    temp.max = possibleValue;
    errs() << "KEY : " << *key << "\n";
    if(data->count(key) == 0) { //check if key w/ fact exists
      f = new Fact();
      f->isBottom = false;
      //add new fact
      data->insert(pair<Value *,Fact *>(key,f));
    } else {
      f = data->find(key)->second;
    }
    //insert a range into the fact
    f->ranges.push_back(temp);
    f->latest = &temp;
    isTop = false;
  }

  void addRange(CmpInst * I, CmpInst::Predicate P) {
    //create a range and set the min and max, based on I and P
    //only possible if first operand is a variable and the second is a constant
    Value * c = I->getOperand(1);
    if(isa<Constant>(c)){
      Value * key = I->getOperand(0);
      //add it as if it was an assignment
      addValue(key,c);
      //grab the new range
      Range * newRange = &data->find(key)->second->ranges.back();
      //now, pivot around that range depending on the predicate
      switch(P){
        case CmpInst::ICMP_EQ : {
          //nothing to be done for this case, the fact is already set to this
        } break;
        case CmpInst::ICMP_NE : {
          //errs() << "ICMP_NE Case\n";
          //TODO : just set to bottom?
        } break;
        case CmpInst::ICMP_SGT :
        case CmpInst::ICMP_UGT : {
          newRange->max = ConstantInt::get(c->getType(), numeric_limits<int>::max());
          newRange->maxIncl = false;
          newRange->minIncl = false;
        } break;
        case CmpInst::ICMP_SGE :
        case CmpInst::ICMP_UGE : {
          newRange->max = ConstantInt::get(c->getType(), numeric_limits<int>::max());
          newRange->maxIncl = false;
          newRange->minIncl = true;
        } break;
        case CmpInst::ICMP_SLT :
        case CmpInst::ICMP_ULT : {
          newRange->min = ConstantInt::get(c->getType(), numeric_limits<int>::min());
          newRange->maxIncl = false;
          newRange->minIncl = false;
        } break;
        case CmpInst::ICMP_SLE :
        case CmpInst::ICMP_ULE : {
          newRange->min = ConstantInt::get(c->getType(), numeric_limits<int>::min());
          newRange->maxIncl = true;
          newRange->minIncl = false;
        } break;
        default : {
          errs() << "ICMP_DEF Case\n";
        } break;
      }
    } else {
      errs() << *c << "is not a constant!\n";
    }
  }
  
  void kill(Value * key) {
    if(data->count(key) == 1) { //check that key exists
      data->erase(data->find(key));
    }
  }
};

class Node
{
  public:
  Instruction * oI;
  Edge * data;
  
  Node(Instruction * I){
    data = new Edge();
    oI = I;
  }
};

class BBNode
{
  public:
  int bID;
  BasicBlock * originalBB;
  Edge * incoming;
  //can have multiple outgoing edges
  map<int, Edge *> outgoing;
  vector<Node *> nodes;
  
  BBNode(int ibID, BasicBlock * BB){
    bID = ibID;
    errs() << "Block Created" << "\n";
    originalBB = BB;
    incoming = new Edge();
    //loop over each instruction in orginalBB and create a Node to point to them
    BasicBlock::iterator I = originalBB->begin(), Ie = originalBB->end();
    for (; I != Ie; ++I) {
      nodes.push_back(new Node(I));
    }
  }
  //use the names of the successor BBs to add the outgoing edges
  void setup() {
    for (succ_iterator SI = succ_begin(originalBB), E = succ_end(originalBB); SI != E; ++SI) {
      BasicBlock *Succ = *SI;
      int id = atoi(Succ->getName().str().c_str());
      outgoing[id] = new Edge();
    }
  }
};

class FlowFunctions
{
  public:
  FlowFunctions(){
    errs() << "Flow Functions Created" << "\n";
  }
  
  map<int, Edge *> m(Edge * in, BBNode * N){
    map<int, Edge *> result;
    //go over each instruction in the BB and apply the flow function!!!
    for(unsigned int i=0;i<N->nodes.size() - 1;i++){
      in = mapInstruction(in, N->nodes[i]);
    }
    in->isTop = false;
    //then use the terminating instructions to make an edge for each successor
    int index = 0;
    for (succ_iterator SI = succ_begin(N->originalBB), E = succ_end(N->originalBB); SI != E; ++SI) {
      BasicBlock *Succ = *SI;
      int id = atoi(Succ->getName().str().c_str());
      result[id] = mapTerminator(new Edge(in), index, N->originalBB->getTerminator());
      index++;
    }
    return result;
  }

  //do flow function calls here
  Edge * mapInstruction(Edge *in, Node *node) {
    if(node->oI->getOpcode() == Instruction::ICmp) {
      errs() << "icmp detected!\n";
      in->kill(node->oI->getOperand(0));
      //add this fact to a list of "pending" for the edge.  On actual branching, we will have to add the range, or invert the range and add that.
      in->pending->push_back(node->oI);
      in->isTop = false;
    }
    //load case: save this assignment to fact
    if(node->oI->getOpcode() == Instruction::Store) {
      errs() << "store detected!\n";
      //kill current ranges for this fact since it is being overwritten
      in->kill(node->oI->getOperand(1));
      //TODO : should we support simple addition an subtraction?
      //only do save if the store operand is a simple constant
      if(isa<Constant>(node->oI->getOperand(0))) {
        in->addValue(node->oI->getOperand(1),node->oI->getOperand(0));
      }
      in->isTop = false;
    }
    return in;
  }
  //TODO : need to consider switch terminators?!
  Edge * mapTerminator(Edge * in, int sIndex, Instruction * I) {
    //if the terminating instruction is a conditional branch, then evaluate it!
    if(I->getOpcode() == Instruction::Br) {
      if(I->getNumOperands() == 3) {
        CmpInst * conditional = dyn_cast<CmpInst>(I->getOperand(0));
        CmpInst::Predicate predi = conditional->getPredicate();
        //if it is the false case, then get the inverse predicate
        if(sIndex == 1){
          predi = CmpInst::getInversePredicate(predi);
        }
        //errs() << "CONDITIONAL INS: "<< *conditional << "\n";
        //Add the range:
        in->addRange(conditional,predi);
      }
    }
    return in;
  }
};


class latticeObj
{
  public:
    latticeObj(){
      errs() << "Lattice Created" << "\n";
    }
    //checks for equality between edges
    bool comparator(Edge * F1,Edge * F2){
      if(F1->isTop != F2->isTop){
        return false;
      }
      //1. check that size is the same
      if(F1->data->size() != F2->data->size()){
        return false;
      }
      //2. iterate over each value and find the corresponding fact.
      map<Value *,Fact *>::iterator it;
      for(it = F1->data->begin(); it != F1->data->end(); it++) {
        //2a. check that they both have the same entry
        if(F2->data->count(it->first) != 1) {
          return false;
        }
        Fact * entry1 = it->second;
        Fact * entry2 = F2->data->find(it->first)->second;
        //check ranges size
        if(entry1->ranges.size() != entry2->ranges.size()){
          return false;
        }
        vector<Range>::iterator itr1;
        for(itr1 = entry1->ranges.begin(); itr1 != entry1->ranges.end(); itr1++) {
          vector<Range>::iterator itr2;
          bool isFound = false;
          for(itr2 = entry2->ranges.begin(); itr2 != entry2->ranges.end(); itr2++) {
            if(*itr1 == *itr2){
              isFound = true;
            }
          }
          if(isFound == false){
            return false;
          }
        }
      }
      return true;
    }
    //merge vector of edges
    Edge * merge(vector<Edge *> edges){
      //create resulting edge
      Edge * result = new Edge();
      //for each edge:
      for(unsigned int i=0;i<edges.size();i++){
        //merge all the facts of the incoming edges
        map<Value *,Fact *>::iterator it;
        for(it = edges[i]->data->begin(); it != edges[i]->data->end(); it++) {
          result->addFact(it->first, it->second);
        }
      }
      result->isTop = result->data->size() == 0;
      return result;
    }
};
